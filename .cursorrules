# Comiketter - Cursor Rules

## プロジェクト概要
Comiketterは、コミックマーケット参加者向けのX（旧Twitter）専用Chrome拡張機能です。TypeScript、React、Webpack、Mantine、IndexedDB、Jest、ESLint、Prettier、Huskyを使用しています。

## 基本ルール

### 1. 言語・環境
- **言語**: 常に日本語で応答する
- **環境**: Windows環境を想定して開発する
- **コメント**: コード内のコメントは日本語で記述する

### 2. ファイル命名規則
- **ディレクトリ**: kebab-case（例: `content-script`, `background-script`）
- **ファイル**: kebab-case（例: `filename-generator.ts`, `api-interceptor.ts`）
- **コンポーネント**: PascalCase（例: `FilenameSettings.tsx`, `CustomBookmark.tsx`）
- **型定義**: PascalCase（例: `FilenameSettingProps`, `TweetMediaFileProps`）
- **定数**: UPPER_SNAKE_CASE（例: `STORAGE_KEYS`, `DEFAULT_SETTINGS`）

### 3. コードスタイル
- **インデント**: 2スペース
- **セミコロン**: 使用する
- **クォート**: シングルクォート（`'`）を使用
- **改行**: ファイル末尾に改行を入れる
- **最大行長**: 100文字以内

### 4. TypeScript規約
- **型注釈**: 明示的に型を指定する
- **インターフェース**: オブジェクト型にはinterfaceを使用
- **型エクスポート**: 型定義は`src/types/index.ts`に集約
- **ジェネリクス**: 適切に使用して型安全性を確保

### 5. React規約
- **関数コンポーネント**: 使用する（クラスコンポーネントは使用しない）
- **フック**: カスタムフックは`src/hooks/`に配置
- **Props型**: 明示的に定義する
- **イベントハンドラー**: `handle`プレフィックスを使用

### 6. ファイル構造
```
src/
├── background/     # バックグラウンドスクリプト
├── components/     # 再利用可能なUIコンポーネント
├── contentScript/  # コンテンツスクリプト
├── hooks/         # カスタムReactフック
├── options/       # オプションページ
├── popup/         # ポップアップページ
├── stores/        # 状態管理
├── test/          # テストファイル
├── types/         # 型定義
└── utils/         # ユーティリティ関数
```

### 7. テスト規約
- **テストファイル**: `.test.ts`または`.spec.ts`サフィックス
- **テスト構造**: describe > it の階層構造
- **モック**: 外部依存は適切にモックする
- **カバレッジ**: 重要な機能は80%以上のカバレッジを目指す

### 8. エラーハンドリング
- **try-catch**: 非同期処理では適切に使用
- **エラーメッセージ**: 日本語で分かりやすく記述
- **ログ出力**: `console.error`でエラーを記録

### 9. パフォーマンス
- **メモ化**: 重い計算には`useMemo`、`useCallback`を使用
- **遅延読み込み**: 大きなコンポーネントは`React.lazy`を使用
- **バンドルサイズ**: 不要な依存関係は削除

### 10. セキュリティ
- **XSS対策**: ユーザー入力は適切にサニタイズ
- **CSP**: Content Security Policyを遵守
- **API認証**: 適切な認証・認可を実装

## 機能固有ルール

### ファイル名・パス設定機能
- **パターントークン**: TwitterMediaHarvest準拠の13種類をサポート
- **バリデーション**: ディレクトリ名とファイル名パターンを検証
- **プレビュー**: リアルタイムでファイル名プレビューを表示
- **設定保存**: IndexedDBを使用して永続化

### API傍受機能
- **型安全**: イベントの型定義を厳密に行う
- **エラーハンドリング**: ネットワークエラーを適切に処理
- **メッセージング**: backgroundとcontentScript間の通信を確実に

### カスタムブックマーク機能
- **データ構造**: 柔軟で拡張可能な設計
- **UI/UX**: X公式に近い見た目を維持
- **パフォーマンス**: 大量のブックマークでも高速動作

## 開発フロー

### 1. 新機能開発時
1. 型定義を`src/types/index.ts`に追加
2. ユーティリティ関数を`src/utils/`に実装
3. テストを`src/test/`に作成
4. コンポーネントを`src/components/`に実装
5. 必要に応じてフックを`src/hooks/`に作成

### 2. バグ修正時
1. テストケースを追加
2. 修正内容をテストで確認
3. 関連する箇所も確認

### 3. リファクタリング時
1. 既存のテストが通ることを確認
2. 型安全性を維持
3. パフォーマンスへの影響を確認

## コミット規約
- **feat**: 新機能追加
- **fix**: バグ修正
- **docs**: ドキュメント更新
- **style**: コードスタイル修正
- **refactor**: リファクタリング
- **test**: テスト追加・修正
- **chore**: その他の変更

## 注意事項
- 流用元コードには必ずライセンス表記を維持・追記
- 日本語コメントは適切に記述
- 型安全性を最優先に考える
- テストは必ず作成する
- パフォーマンスを意識した実装を行う 